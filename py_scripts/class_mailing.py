import asyncio

import telegram
from py_scripts.funcs_back import prepare_for_markdown, timetable_kbrd, check_busy
from py_scripts.consts import COMMANDS
from telegram.ext import ConversationHandler, ContextTypes
from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update

from py_scripts.security import check_hash
from sqlalchemy_scripts.users import User
from sqlalchemy_scripts import db_session


async def make_mailing(update: Update, context: ContextTypes.DEFAULT_TYPE, step_text):
    didnt_send = {}
    arr = []
    for file in context.user_data['ATTACHMENTS']:
        arr.append(telegram.InputMediaDocument(media=file))

    async def send_msg(user: User):
        try:
            if len(arr) >= 2:
                msg = await context.bot.send_media_group(user.chat_id, arr, caption=mail_text,
                                                         parse_mode='MarkdownV2')
                msg = msg[0]
            elif len(arr) == 1:
                msg = await context.bot.send_document(user.chat_id, arr[0].media, caption=mail_text,
                                                      parse_mode='MarkdownV2')
            else:
                msg = await context.bot.send_message(user.chat_id, mail_text, parse_mode='MarkdownV2')
            await msg.pin()
        except Exception as e:
            if e.__str__() not in didnt_send:
                didnt_send[e.__str__()] = 1
            else:
                didnt_send[e.__str__()] += 1

    msg__ = await update.message.reply_text(f'‚è≥ *–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏\. –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è \- –¥–æ 1 –º–∏–Ω—É—Ç—ã*',
                                            parse_mode='MarkdownV2')
    chat_id = update.message.chat_id
    db_sess = db_session.create_session()
    author = db_sess.query(User).filter(User.chat_id == chat_id).first()
    if context.user_data['PARAL'] == '–í—Å–µ–º':
        all_users = db_sess.query(User).all()
    elif context.user_data['PARAL'] == '–ê–¥–º–∏–Ω—ã':
        all_users = db_sess.query(User).filter(User.role == 'admin').all()
    elif context.user_data['PARAL'] == '–£—á–∏—Ç–µ–ª—è':
        all_users = db_sess.query(User).filter((User.role == 'teacher') | (User.role == 'admin')).all()
    elif context.user_data['PARAL'] == '–£—á–∞—â–∏–µ—Å—è':
        all_users = db_sess.query(User).filter((User.role == 'student') | (User.role == 'admin')).all()
    else:
        if context.user_data['CLASS'] == '–í—Å–µ–º':
            all_users = db_sess.query(User).filter((User.number == context.user_data['PARAL']) |
                                                   (User.role == 'admin')).all()
        else:
            all_users = db_sess.query(User).filter((User.number == context.user_data['CLASS']) |
                                                   (User.role == 'admin')).all()
    db_sess.close()
    if author.grade is None and author.role == 'teacher':
        user_grade = '–£—á–∏—Ç–µ–ª—å'
    elif author.grade is None and author.role == 'admin':
        user_grade = '–ê–¥–º–∏–Ω'
    else:
        user_grade = author.grade
    mail_text = "\n\n".join((['üì¨*–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\!*üì¨',
                          context.user_data['MESSAGE'],
                          prepare_for_markdown(f'–û—Ç {author.surname} {author.name}, {user_grade}')]))

    tasks = [send_msg(user) for user in all_users]
    await asyncio.gather(*tasks)

    context.user_data['ATTACHMENTS'].clear()
    context.user_data['FILES_SIZE'] = 0
    p, c = context.user_data['PARAL'], context.user_data['CLASS']
    t = "\n".join([f'–¢–∏–ø –æ—à–∏–±–∫–∏ "{k}": {v} —á–µ–ª–æ–≤–µ–∫' for k, v in didnt_send.items()])
    if t:
        t = "\n".join(['‚ùóÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:', t])
    try:
        text_ = "\n\n\n".join(['–°–æ–æ–±—â–µ–Ω–∏–µ\:', mail_text,
                           prepare_for_markdown(f'–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å "{p}", –∫–ª–∞—Å—Å: "{c}"')])

        if len(arr) >= 2:
            await context.bot.send_media_group(update.message.chat_id, arr, caption=text_,
                                               parse_mode='MarkdownV2')
        elif len(arr) == 1:
            await context.bot.send_document(update.message.chat_id, arr[0].media, caption=text_,
                                            parse_mode='MarkdownV2')
        else:
            await context.bot.send_message(update.message.chat_id, text_, parse_mode='MarkdownV2')

        await update.message.reply_text(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–∫–æ–Ω—á–µ–Ω–∞.\n{t}\n–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /mail',
                                        reply_markup=await timetable_kbrd())
        context.user_data['in_conversation'] = False
        context.user_data['DIALOG_CMD'] = None
        await msg__.delete()
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(
            f'‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ \(–æ—à–∏–±–∫–∞\: {prepare_for_markdown(e.__str__())}\)\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ '
            f'–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ\. ‚ùóÔ∏è–ù–ï–õ–¨–ó–Ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∏ –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ\!*',
            parse_mode='MarkdownV2')
        await msg__.delete()
        return step_text


class MailTo:
    parallels = ['6', '7', '8', '9', '10', '11']
    classes = {f'{i}': [f'{i}{j}' for j in '–ê–ë–í–ì–î'] for i in range(7, 12)}
    classes['6'] = ['6–ê', '6–ë', '6–í']
    step_pswrd = 1
    step_parallel = 2
    step_class = 3
    step_text = 4
    step_attachments = 5
    size_limit = 100

    async def mailing_parallels_kbrd(self):
        btns = []
        for i in self.parallels:
            btns.append(KeyboardButton(i))

        kbd = ReplyKeyboardMarkup(
            [btns, [KeyboardButton('–ê–¥–º–∏–Ω—ã'), KeyboardButton('–£—á–∏—Ç–µ–ª—è')], [KeyboardButton('–£—á–∞—â–∏–µ—Å—è')], [KeyboardButton('–í—Å–µ–º')]],
            resize_keyboard=True)
        return kbd

    async def mailing_classes_kbrd(self, parallel):
        btns = []
        for i in self.classes[parallel]:
            btns.append(KeyboardButton(i))
        kbd = ReplyKeyboardMarkup([btns, [KeyboardButton(f'–í—Å–µ–º')]],
                                  resize_keyboard=True)
        return kbd

    async def attachments_kbrd(self):
        kbd = ReplyKeyboardMarkup([['üìß–ì–æ—Ç–æ–≤–æüìß']],
                                  resize_keyboard=True)
        return kbd

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        is_busy = await check_busy(update, context)
        if is_busy:
            return ConversationHandler.END
        chat_id = update.message.chat_id
        db_sess = db_session.create_session()
        user = db_sess.query(User).filter(User.chat_id == chat_id).first()
        db_sess.close()
        if not user:
            await update.message.reply_text('‚ö†Ô∏è *–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\. –ù–∞–ø–∏—à–∏—Ç–µ \/start –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ*',
                                            parse_mode='MarkdownV2')
            return ConversationHandler.END
        await update.message.reply_text('–ü—Ä–µ—Ä–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏: /end_mail')
        context.user_data['in_conversation'] = True
        context.user_data['DIALOG_CMD'] = "".join(['/', COMMANDS['mail']])
        if user.role == 'admin':
            text_to_send = (f'*–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º\: {prepare_for_markdown(user.surname)} '
                            f'{prepare_for_markdown(user.name)}\, –ê–¥–º–∏–Ω*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å\, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞\:')
            await update.message.reply_text(text_to_send, reply_markup=await self.mailing_parallels_kbrd(),
                                            parse_mode='MarkdownV2')
            return self.step_parallel
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
        return self.step_pswrd

    async def get_psw(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not check_hash(update.message.text):
            await update.message.reply_text('‚ö†Ô∏è *–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å\. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞\. '
                                            '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\: \/mail*', parse_mode='MarkdownV2')
            context.user_data['in_conversation'] = False
            context.user_data['DIALOG_CMD'] = None
            return ConversationHandler.END
        chat_id = update.message.chat_id
        db_sess = db_session.create_session()
        user = db_sess.query(User).filter(User.chat_id == chat_id).first()
        db_sess.close()
        grade = user.grade
        if grade is None:
            grade = '–£—á–∏—Ç–µ–ª—å'
        text_to_send = (f'*–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º\: {prepare_for_markdown(user.surname)} '
                        f'{prepare_for_markdown(user.name)}\, {prepare_for_markdown(grade)}*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å\, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞\:')
        await update.message.reply_text(text_to_send, reply_markup=await self.mailing_parallels_kbrd(),
                                        parse_mode='MarkdownV2')
        return self.step_parallel

    async def get_parallel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text in ['–í—Å–µ–º', '–ê–¥–º–∏–Ω—ã', '–£—á–∏—Ç–µ–ª—è', '–£—á–∞—â–∏–µ—Å—è']:
            context.user_data['PARAL'] = update.message.text
            context.user_data['CLASS'] = update.message.text
            await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
                                            reply_markup=ReplyKeyboardRemove())
            return self.step_text
        if update.message.text not in self.parallels:
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:',
                                            reply_markup=await self.mailing_parallels_kbrd())
            return self.step_parallel
        context.user_data['PARAL'] = update.message.text
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:',
                                        reply_markup=await self.mailing_classes_kbrd(
                                            context.user_data['PARAL']))
        return self.step_class

    async def get_class(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text == '–í—Å–µ–º':
            context.user_data['CLASS'] = update.message.text
            await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
                                            reply_markup=ReplyKeyboardRemove())
            return self.step_text
        classes = self.classes[context.user_data['PARAL']]
        if update.message.text not in classes:
            await update.message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:',
                reply_markup=await self.mailing_classes_kbrd(context.user_data['PARAL']))
            return self.step_class
        context.user_data['CLASS'] = update.message.text
        await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n‚ùóÔ∏è–ù–ï–õ–¨–ó–Ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∏ –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ!',
                                        reply_markup=ReplyKeyboardRemove())
        return self.step_text

    async def get_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['MESSAGE'] = update.message.text_markdown_v2
        text_ = '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ –∂–µ–ª–∞–Ω–∏—é\.\n‚ö†Ô∏è *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Ñ–∞–π–ª–æ–≤*\n'
        text_2 = prepare_for_markdown(f'1. –°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {self.size_limit}–ú–ë. '
                                     '–†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20–ú–ë.\n'
                                     '2. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ–ª–µ–µ '
                                     '10 —Ñ–∞–π–ª–æ–≤, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10).\n'
                                     '3. –ü—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ç—è–∂–µ–ª—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–∏–≥–∞—é—Ç –ª–∏–º–∏—Ç), '
                                     '—Ä–∞—Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è.\n'
                                     '4. ‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"')
        text_ = "".join([text_, text_2])
        await update.message.reply_text(text_, reply_markup=await self.attachments_kbrd(),
                                        parse_mode='MarkdownV2')
        await context.bot.send_photo(update.message.chat_id, 'data/instruction.jpg')
        context.user_data['ATTACHMENTS'] = []
        context.user_data['FILES_SIZE'] = 0
        return self.step_attachments

    async def get_attachments(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if update.message.audio is None:
                file_info = await context.bot.get_file(update.message.document.file_id)
                file_id = update.message.document.file_id
            else:
                file_info = await context.bot.get_file(update.message.audio.file_id)
                file_id = update.message.audio.file_id
            if file_info.file_size / 1024 / 1024 > 50:
                raise Exception
        except Exception as e:
            await update.message.reply_text(f'‚ö†Ô∏è *–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω\, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–µ—Å–∏—Ç –±–æ–ª–µ–µ 50–ú–ë –∏–ª–∏ –Ω–µ '
                                            f'—É–º–µ—â–∞–µ—Ç—Å—è –≤ —Å—É–º–º–∞—Ä–Ω—ã–π –ª–∏–º–∏—Ç {self.size_limit}–ú–ë\.* '
                                            f'–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è\. '
                                            f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\, '
                                            f'–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\"',
                                            parse_mode='MarkdownV2')
            return self.step_attachments
        context.user_data['FILES_SIZE'] += file_info.file_size
        context.user_data['ATTACHMENTS'].append(file_id)
        if context.user_data['FILES_SIZE'] / 1024 / 1024 > self.size_limit:
            context.user_data['ATTACHMENTS'] = context.user_data['ATTACHMENTS'][:-1]
            context.user_data['FILES_SIZE'] -= file_info.file_size
            await update.message.reply_text('‚ö†Ô∏è *–§–∞–π–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑\-–∑–∞ –ª–∏–º–∏—Ç–∞ —Å—É–º–º–∞—Ä–Ω–æ–≥–æ '
                                            '—Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤\.* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è\. '
                                            '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\, '
                                            '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\"',
                                            parse_mode='MarkdownV2')
            return self.step_attachments
        if len(context.user_data['ATTACHMENTS']) == 10:
            await update.message.reply_text('‚ö†Ô∏è *–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–π–ª–æ–≤\. '
                                            '–ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10\.*',
                                            parse_mode='MarkdownV2')
            return await self.send_message(update, context)
        await update.message.reply_text('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. '
                                        '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, '
                                        '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"')
        return self.step_attachments

    async def get_ready(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text == 'üìß–ì–æ—Ç–æ–≤–æüìß':
            return await self.send_message(update, context)
        return self.step_attachments

    async def send_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await make_mailing(update, context, self.step_text)

    async def end_mailing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /mail',
                                        reply_markup=await timetable_kbrd())
        context.user_data['in_conversation'] = False
        context.user_data['DIALOG_CMD'] = None
        return ConversationHandler.END
