from py_scripts.funcs_back import *
from telegram.ext import ConversationHandler
from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove


class MailTo:
    parallels = ['6', '7', '8', '9', '10', '11']
    classes = {f'{i}': [f'{i}{j}' for j in '–ê–ë–í–ì–î'] for i in range(7, 12)}
    classes['6'] = ['6–ê', '6–ë', '6–í']
    step_pswrd = 1
    step_parallel = 2
    step_class = 3
    step_text = 4
    step_attachments = 5

    async def mailing_parallels_kbrd(self):
        btns = []
        for i in self.parallels:
            btns.append(KeyboardButton(i))

        kbd = ReplyKeyboardMarkup([btns, [KeyboardButton('–ê–¥–º–∏–Ω'), KeyboardButton('–£—á–∏—Ç–µ–ª—è')], [KeyboardButton('–í—Å–µ–º')]], resize_keyboard=True)
        return kbd

    async def mailing_classes_kbrd(self, parallel):
        btns = []
        for i in self.classes[parallel]:
            btns.append(KeyboardButton(i))
        kbd = ReplyKeyboardMarkup([btns, [KeyboardButton(f'–í—Å–µ–º')]],
                                  resize_keyboard=True)
        return kbd

    async def attachments_kbrd(self):
        kbd = ReplyKeyboardMarkup([['üìß–ì–æ—Ç–æ–≤–æüìß']],
                                  resize_keyboard=True)
        return kbd

    async def start(self, update, context):
        if context.user_data.get('in_conversation'):
            return ConversationHandler.END
        user = db_sess.query(User).filter(User.telegram_id == update.message.chat.id).first()
        if not user:
            await update.message.reply_text(
                f'–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ')
            return ConversationHandler.END
        await update.message.reply_text('–ü—Ä–µ—Ä–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏: /end_mail')
        if user.role == 'admin':
            await update.message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:',
                reply_markup=await self.mailing_parallels_kbrd())
            context.user_data['in_conversation'] = True
            return self.step_parallel
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
        context.user_data['in_conversation'] = True
        return self.step_pswrd

    async def get_psw(self, update, context):
        if my_hash(update.message.text) != password_hash:
            await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞. '
                                            '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /mailing')
            context.user_data['in_conversation'] = False
            return ConversationHandler.END
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞\n'
                                        '‚ö†Ô∏è–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∏—Ç–µ–ª—è–º –≤—ã–±–µ—Ä–∏—Ç–µ "–ê–¥–º–∏–Ω":',
                                        reply_markup=await self.mailing_parallels_kbrd())
        return self.step_parallel

    async def get_parallel(self, update, context):
        if update.message.text == '–í—Å–µ–º' or update.message.text == '–ê–¥–º–∏–Ω' or update.message.text == '–£—á–∏—Ç–µ–ª—è':
            context.user_data['PARAL'] = update.message.text
            context.user_data['CLASS'] = update.message.text
            await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
                                            reply_markup=ReplyKeyboardRemove())
            return self.step_text
        if update.message.text not in self.parallels:
            await update.message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:',
                reply_markup=await self.mailing_parallels_kbrd())
            return self.step_parallel
        context.user_data['PARAL'] = update.message.text
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:',
                                        reply_markup=await self.mailing_classes_kbrd(
                                            context.user_data['PARAL']))
        return self.step_class

    async def get_class(self, update, context):
        if update.message.text == '–í—Å–µ–º':
            context.user_data['CLASS'] = update.message.text
            await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å–ª—ã–∫–∏:',
                                            reply_markup=ReplyKeyboardRemove())
            return self.step_text
        classes = self.classes[context.user_data['PARAL']]
        if update.message.text not in classes:
            await update.message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:',
                reply_markup=await self.mailing_classes_kbrd(context.user_data['PARAL']))
            return self.step_class
        context.user_data['CLASS'] = update.message.text
        await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å–ª—ã–∫–∏:',
                                        reply_markup=ReplyKeyboardRemove())
        return self.step_text

    async def get_text(self, update, context):
        context.user_data['MESSAGE'] = update.message.text_markdown_v2
        text_ = '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ –∂–µ–ª–∞–Ω–∏—é\.\n*‚ö†Ô∏è–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Ñ–∞–π–ª–æ–≤*\n' + \
            prepare_for_markdown('1. –°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10–ú–ë.\n'
                                 '2. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ–ª–µ–µ '
                                 '10 —Ñ–∞–π–ª–æ–≤, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10).\n'
                                 '3. –ü—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ç—è–∂–µ–ª—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–∏–≥–∞—é—Ç –ª–∏–º–∏—Ç), '
                                 '—Ä–∞—Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è, –∏ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –¥–æ 3 –º–∏–Ω—É—Ç.\n'
                                 '4. ‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"')
        await update.message.reply_text(text_, reply_markup=await self.attachments_kbrd(),
                                        parse_mode='MarkdownV2')
        await bot.send_photo(update.message.chat.id, 'data/instruction.jpg')
        context.user_data['ATTACHMENTS'] = []
        context.user_data['FILES_SIZE'] = 0
        return self.step_attachments

    async def get_attachments(self, update, context):
        context.user_data['ATTACHMENTS'].append(update.message.document.file_id)
        file_info = await bot.get_file(update.message.document.file_id)
        if file_info.file_size / 1024 / 1024 > 10:
            await update.message.reply_text('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. '
                                            '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, '
                                            '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"')
            return self.step_attachments
        context.user_data['FILES_SIZE'] += file_info.file_size
        if context.user_data['FILES_SIZE'] / 1024 / 1024 > 10:
            len_ = len(context.user_data['ATTACHMENTS']) - 1
            await update.message.reply_text(f'–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ –æ–±—â–µ–º—É —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–æ–≤. '
                                            f'–ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {len_}.')
            context.user_data['ATTACHMENTS'] = context.user_data['ATTACHMENTS'][:-1]
            return await self.send_message(update, context)
        if len(context.user_data['ATTACHMENTS']) == 10:
            await update.message.reply_text('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–π–ª–æ–≤. '
                                            '–ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10.')
            context.user_data['ATTACHMENTS'] = context.user_data['ATTACHMENTS'][:10]
            return await self.send_message(update, context)
        await update.message.reply_text('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. '
                                        '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, '
                                        '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"')
        return self.step_attachments

    async def get_ready(self, update, context):
        if update.message.text == 'üìß–ì–æ—Ç–æ–≤–æüìß':
            return await self.send_message(update, context)
        return self.step_attachments

    async def send_message(self, update, context):
        author = db_sess.query(User).filter(User.chat_id == update.message.chat.id).first()
        if context.user_data['PARAL'] == '–ê–¥–º–∏–Ω':
            all_users = db_sess.query(User).filter(User.role == 'admin').all()
        elif context.user_data['PARAL'] == '–£—á–∏—Ç–µ–ª—è':
            all_users = db_sess.query(User).filter(User.role == 'teacher').all()
        else:
            all_users = db_sess.query(User).all()
            if context.user_data['PARAL'] != '–í—Å–µ–º':
                # context.user_data['PARAL'] in User.grade
                all_users = (db_sess.query(User).
                             filter(User.number == context.user_data['PARAL']).all())
                if context.user_data['CLASS'] != '–í—Å–µ–º':
                    all_users = db_sess.query(User).filter(
                        context.user_data['CLASS'] == User.grade).all()
        mailbox_ = prepare_for_markdown('üì¨')
        if author.grade is None and author.role == 'teacher':
            user_grade = '–£—á–∏—Ç–µ–ª—å'
        elif author.grade is None and author.role == 'admin':
            user_grade = '–ê–¥–º–∏–Ω'
        else:
            user_grade = author.grade
        mail_text = (mailbox_ + '*–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\!*' + mailbox_ + prepare_for_markdown('\n\n') +
                     context.user_data['MESSAGE'] +
                     prepare_for_markdown(f'\n\n–û—Ç {author.surname} {author.name}, {user_grade}'))
        arr = []
        didnt_send = {}
        for file in context.user_data['ATTACHMENTS']:
            arr.append(telegram.InputMediaDocument(media=file))
        for user in all_users:
            try:
                if len(arr) >= 2:
                    await bot.send_media_group(user.chat_id, arr, caption=mail_text, parse_mode='MarkdownV2')
                elif len(arr) == 1:
                    await bot.send_document(user.chat_id, context.user_data['ATTACHMENTS'][0],
                                            caption=mail_text, parse_mode='MarkdownV2')
                else:
                    await bot.send_message(user.chat_id, mail_text, parse_mode='MarkdownV2')
            except Exception as e:
                if e.__str__() not in didnt_send:
                    didnt_send[e.__str__()] = 1
                else:
                    didnt_send[e.__str__()] += 1
                continue
        context.user_data['ATTACHMENTS'] = []
        context.user_data['FILES_SIZE'] = 0
        p, c = context.user_data['PARAL'], context.user_data['CLASS']
        t = "\n".join([f'–¢–∏–ø –æ—à–∏–±–∫–∏ "{k}": {v} —á–µ–ª–æ–≤–µ–∫' for k, v in didnt_send.items()])
        if t:
            t = '‚ùóÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:\n' + t
        try:
            await update.message.reply_text(prepare_for_markdown(f'–°–æ–æ–±—â–µ–Ω–∏–µ:\n') + mail_text +
                                            prepare_for_markdown(f'\n\n–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å "{p}", –∫–ª–∞—Å—Å: "{c}"'), parse_mode='MarkdownV2')
            await update.message.reply_text(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–∫–æ–Ω—á–µ–Ω–∞.\n{t}\n–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /mail',
                                            reply_markup=await timetable_kbrd())
            context.user_data['in_conversation'] = False
            return ConversationHandler.END
        except Exception as e:
            await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ. ‚ùóÔ∏è–ù–ï–õ–¨–ó–Ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∏ –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ!')
            return self.step_text

    async def end_mailing(self, update, context):
        await update.message.reply_text('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /mail',
                                        reply_markup=await timetable_kbrd())
        context.user_data['in_conversation'] = False
        return ConversationHandler.END
