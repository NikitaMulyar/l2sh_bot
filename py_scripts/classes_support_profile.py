from py_scripts.funcs_back import (throttle, timetable_kbrd, prepare_for_markdown,
                                   check_busy)
from sqlalchemy_scripts.users import User
from telegram import Update
from telegram.ext import ContextTypes
from sqlalchemy_scripts import db_session


class Profile:
    @throttle()
    async def get_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        is_busy = await check_busy(update, context)
        if is_busy:
            return
        chat_id = update.message.chat.id
        db_sess = db_session.create_session()
        user = db_sess.query(User).filter(User.chat_id == chat_id).first()
        db_sess.close()
        if not user:
            await update.message.reply_text('‚ö†Ô∏è *–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\: \/start*',
                                            parse_mode='MarkdownV2')
            return
        grade = user.grade
        role = "–£—á–µ–Ω–∏–∫"
        if not grade:
            if user.role == "teacher":
                grade = "–£—á–∏—Ç–µ–ª—å"
                role = "–£—á–∏—Ç–µ–ª—å"
            else:
                grade = "–ê–¥–º–∏–Ω"
                role = "–ê–¥–º–∏–Ω"

        t = (f'üì†*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*üì†\n\n' +
             prepare_for_markdown(f'–ö–ª–∞—Å—Å: {grade}\n–ò–º—è: {user.name}\n–§–∞–º–∏–ª–∏—è: {user.surname}\n'
                                  f'–†–æ–ª—å: {role}'))
        await update.message.reply_text(t, parse_mode='MarkdownV2')


class Support:
    @throttle()
    async def get_supp(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text('–ß–∞—Ç —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∏: @help_group_l2sh\n'
                                        '–ê–¥–º–∏–Ω—ã: @delikatny_pon (–ù–∏–∫–∏—Ç–∞), @lokisf8 (–ú–∞—Ç–≤–µ–π)')
