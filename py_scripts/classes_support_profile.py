from py_scripts.funcs_back import *


class Profile:
    @throttle
    async def get_profile(self, update, context):
        if context.user_data.get('in_conversation'):
            return
        user__id = update.message.from_user.id
        if not db_sess.query(User).filter(User.telegram_id == user__id).first():
            await update.message.reply_text(f'–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: /start')
            return
        user = db_sess.query(User).filter(User.telegram_id == user__id).first()
        if not user:
            await update.message.reply_text(
                f'–í—ã –¥–∞–∂–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –ù–∞–ø–∏—à–∏ /start –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ')
            return
        grade = user.grade
        if not grade:
            if user.role == "teacher":
                grade = "–£—á–∏—Ç–µ–ª—å"
            else:
                grade = "–ê–¥–º–∏–Ω"
        t = f'üì†*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*üì†\n\n' + (f'–ö–ª–∞—Å—Å: {grade}\n–ò–º—è: {user.name}\n'
                                      f'–§–∞–º–∏–ª–∏—è: {user.surname}')
        await update.message.reply_text(t, parse_mode='MarkdownV2',
                                        reply_markup=await timetable_kbrd())


class Support:
    @throttle
    async def get_supp(self, update, context):
        await update.message.reply_text('–ß–∞—Ç —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∏: @help_group_l2sh',
                                        reply_markup=await timetable_kbrd())
