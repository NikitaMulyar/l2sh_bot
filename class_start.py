from telegram import ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ConversationHandler
from funcs_back import *


class SetTimetable:
    step_class = 1
    step_familia = 2
    step_name = 3
    classes = ['6–ê', '6–ë', '6–í'] + [f'{i}{j}' for i in range(7, 12) for j in '–ê–ë–í–ì–î']
    grade = ""
    name = ""
    surname = ""

    async def timetable_kbrd(self):
        btn = KeyboardButton('üìö–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö')
        kbd = ReplyKeyboardMarkup([[btn]], resize_keyboard=True)
        return kbd

    async def start(self, update, context):
        context.user_data['in_conversation'] = True
        db_sess = db_session.create_session()
        user__id = update.message.from_user.id
        if db_sess.query(User).filter(User.telegram_id == user__id).first():
            await update.message.reply_text(
                '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ.\n'
                '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º',
                reply_markup=await self.timetable_kbrd())
            context.user_data['in_conversation'] = False
            context.user_data['last'] = True
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                '–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞–≤–∞—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å!\n'
                '–ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π: –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å (–ø—Ä–∏–º–µ—Ä: 7–ì)',
                reply_markup=ReplyKeyboardRemove())
            # context.user_data['INFO'] = dict()
            return self.step_class

    async def get_class(self, update, context):
        if update.message.text not in self.classes:
            await update.message.reply_text(f'–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å "{update.message.text}"')
            return self.step_class
        # context.user_data['INFO']['Class'] = update.message.text
        self.grade = update.message.text
        await update.message.reply_text(f'–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é (–ø—Ä–∏–º–µ—Ä: –ù–µ–∫—Ä–∞—Å–æ–≤)')
        return self.step_familia

    async def get_familia(self, update, context):
        # context.user_data['INFO']['Familia'] = update.message.text
        self.surname = update.message.text
        await update.message.reply_text(f'–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–µ –ü–û–õ–ù–û–ï –∏–º—è (–ø—Ä–∏–º–µ—Ä: –ù–∏–∫–æ–ª–∞–π)')
        return self.step_name

    async def get_name(self, update, context):
        # context.user_data['INFO']['Name'] = update.message.text
        self.name = update.message.text
        put_to_db(update, self.name, self.surname, self.grade)
        await update.message.reply_text(f'–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º',
                                        reply_markup=await self.timetable_kbrd())
        context.user_data['in_conversation'] = False
        context.user_data['last'] = True
        return ConversationHandler.END

    async def end_setting(self, update, context):
        context.user_data['in_conversation'] = False
        context.user_data['INFO'] = dict()
        context.user_data['last'] = False
        await update.message.reply_text(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /start')
