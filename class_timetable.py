from funcs_back import *
from telegram.ext import ConversationHandler


class GetTimetable:
    days = {0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥—É', 3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü—É', 5: '–°—É–±–±–æ—Ç—É'}
    day_num = {'–ü–Ω': 0, '–í—Ç': 1, '–°—Ä': 2, '–ß—Ç': 3, '–ü—Ç': 4, '–°–±': 5}
    lessons_keys = {'0-–π —É—Ä–æ–∫, 8:30 - 8:55:\n': '0\n08:30 - 08:55',
                    '1-–π —É—Ä–æ–∫, 9:00 - 9:45:\n': '1\n09:00 - 09:45',
                    '2-–π —É—Ä–æ–∫, 9:55 - 10:40:\n': '2\n09:55 - 10:40',
                    '3-–π —É—Ä–æ–∫, 10:50 - 11:35:\n': '3\n10:50 - 11:35',
                    '4-–π —É—Ä–æ–∫, 11:45 - 12:30:\n': '4\n11:45 - 12:30',
                    '5-–π —É—Ä–æ–∫, 12:50 - 13:35:\n': '5\n12:50 - 13:35',
                    '6-–π —É—Ä–æ–∫, 13:55 - 14:40:\n': '6\n13:55 - 14:40',
                    '7-–π —É—Ä–æ–∫, 14:50 - 15:35:\n': '7\n14:50 - 15:35',
                    '8-–π —É—Ä–æ–∫, 15:45 - 16:30:\n': '8\n15:45 - 16:30'}
    for_datetime = {'0\n08:30 - 08:55': ((8, 20),
                                         (8, 55)),
                    '1\n09:00 - 09:45': ((8, 55),
                                         (9, 45)),
                    '2\n09:55 - 10:40': ((9, 45),
                                         (10, 40)),
                    '3\n10:50 - 11:35': ((10, 40),
                                         (11, 35)),
                    '4\n11:45 - 12:30': ((11, 35),
                                         (12, 30)),
                    '5\n12:50 - 13:35': ((12, 30),
                                         (13, 35)),
                    '6\n13:55 - 14:40': ((13, 35),
                                         (14, 40)),
                    '7\n14:50 - 15:35': ((14, 40),
                                         (15, 35)),
                    '8\n15:45 - 16:30': ((15, 35),
                                         (16, 30))}

    """async def create_standard_timetable(self, update, context, db_sess, user__id):
        user = db_sess.query(User).filter(User.telegram_id == user__id).first()
        lessons, day = await get_timetable_for_user(context, user.name, user.surname, user.grade)
        if lessons.empty:
            txt = (user.surname + ' ' + user.name + ' ' + user.grade)
            class_txt = user.grade

            await update.message.reply_text(f'–£—á–µ–Ω–∏–∫–∞ "{txt}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç '
                                            f'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {class_txt} –∫–ª–∞—Å—Å–∞.')
            return ConversationHandler.END
        t = f'*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ _{self.days[day]}_*\n\n'
        time_now = datetime.now()  # - timedelta(hours=3)
        # !!!!!!!!!!!!!!!!!
        for txt_info, key in self.lessons_keys.items():
            try:
                lesson_info = lessons[key].split('\n')  # –ü–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ: —É—á–∏—Ç–µ–ª—å,
                # –ø—Ä–µ–¥–º–µ—Ç, –∫–∞–±.
                start, end = self.for_datetime[key]

                if start <= (time_now.hour, time_now.minute) < end and not context.user_data[
                    'NEXT_DAY_TT']:
                    t += f'_*' + prepare_for_markdown(
                        f'‚û°Ô∏è {txt_info}{lesson_info[1]} - –∫–∞–±. {lesson_info[-1]}\n(—É—á–∏—Ç–µ–ª—å: {lesson_info[0]})') + '*_\n\n'
                else:
                    t += prepare_for_markdown(
                        f'{txt_info}{lesson_info[1]} - –∫–∞–±. {lesson_info[-1]}\n(—É—á–∏—Ç–µ–ª—å: {lesson_info[0]})\n\n')
            except Exception:
                continue"""

    async def get_timetable(self, update, context):
        if context.user_data.get('in_conversation'):
            return
        db_sess = db_session.create_session()
        user__id = update.message.from_user.id
        if not db_sess.query(User).filter(User.telegram_id == user__id).first():
            await update.message.reply_text(f'–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: /start')
            return ConversationHandler.END
        if update.message.text == 'üìö–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö':
            user = db_sess.query(User).filter(User.telegram_id == user__id).first()
            context.user_data['NEXT_DAY_TT'] = False
            if int(user.number) >= 10:
                lessons, day = await get_timetable_for_user(context, user.name, user.surname, user.grade)
            else:
                lessons, day = await get_timetable_for_user_6_9(context, user.grade)
            if lessons.empty:
                txt = (user.surname + ' ' + user.name + ' ' + user.grade)
                class_txt = user.grade

                await update.message.reply_text(f'–£—á–µ–Ω–∏–∫–∞ "{txt}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç '
                                                f'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {class_txt} –∫–ª–∞—Å—Å–∞.')
                return
            t = f'*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ _{self.days[day]}_*\n\n'
            time_now = datetime.now()
            # !!!!!!!!!!!!!!!!!
            for txt_info, key in self.lessons_keys.items():
                try:
                    if int(user.number) >= 10:
                        pre_lesson_info = lessons.loc[key].split('###')
                    else:
                        pre_lesson_info = lessons.loc[key][day].split('###')
                    start, end = self.for_datetime[key]
                    # –ü–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ: —É—á–∏—Ç–µ–ª—å, –ø—Ä–µ–¥–º–µ—Ç, –∫–∞–±.
                    # if type(pre_lesson_info) == str:
                    #     pre_lesson_info = [pre_lesson_info]
                    if start <= (time_now.hour, time_now.minute) < end and not context.user_data['NEXT_DAY_TT']:
                        t += f'_*' + prepare_for_markdown(f'‚û°Ô∏è {txt_info}')
                    else:
                        t += prepare_for_markdown(f'{txt_info}')
                    for lesson_info in pre_lesson_info:
                        lesson_info = lesson_info.split('\n')
                        t += prepare_for_markdown(f'{lesson_info[1]} - –∫–∞–±. {lesson_info[-1]}\n(—É—á–∏—Ç–µ–ª—å: {lesson_info[0]})\n')
                    if start <= (time_now.hour, time_now.minute) < end and not context.user_data['NEXT_DAY_TT']:
                        t += '*_'
                    t += '\n'
                except Exception as e:
                    continue
            t += '\n'
            edits_in_tt, for_which_day = await get_edits_in_timetable()
            print(for_which_day, context.user_data['NEXT_DAY_TT'], len(edits_in_tt))
            if ('–∑–∞–≤—Ç—Ä–∞' in for_which_day and context.user_data['NEXT_DAY_TT'] or
                    '—Å–µ–≥–æ–¥–Ω—è' in for_which_day and not context.user_data['NEXT_DAY_TT']):
                if len(edits_in_tt) != 0:
                    for df in edits_in_tt:
                        res = []
                        for j in df.index.values:
                            if '–ó–∞–º–µ–Ω—ã' in df.columns.values:
                                if j == 0:
                                    continue
                                if user.number in df.iloc[j]['–ö–ª–∞—Å—Å'] and user.grade[-1] in df.iloc[j]['–ö–ª–∞—Å—Å']:
                                    subject, teacher_cabinet = df.iloc[j]['–ó–∞–º–µ–Ω—ã'].split('//')
                                    subject = " ".join(subject.split('\n'))
                                    class__ = " ".join(df.iloc[j]['–ö–ª–∞—Å—Å'].split('\n'))
                                    if teacher_cabinet != '':
                                        teacher_cabinet = teacher_cabinet.split('\n')
                                        cabinet = teacher_cabinet[-1]
                                        teacher = " ".join(teacher_cabinet[:-1])
                                        if cabinet.count('.') == 2:
                                            # –£—á–∏—Ç–µ–ª—å
                                            res.append([f"{class__}, ", df.iloc[j]['‚Ññ —É—Ä–æ–∫–∞'], subject, cabinet])
                                        else:
                                            res.append([f"{class__}, ", df.iloc[j]['‚Ññ —É—Ä–æ–∫–∞'], subject + ', ' + cabinet, teacher])
                                    else:
                                        res.append([f"{class__}, ", df.iloc[j]['‚Ññ —É—Ä–æ–∫–∞'], subject])
                            else:
                                if user.number in df.iloc[j]['–ö–ª–∞—Å—Å'] and user.grade[-1] in df.iloc[j]['–ö–ª–∞—Å—Å']:
                                    class__ = " ".join(df.iloc[j]['–ö–ª–∞—Å—Å'].split('\n'))
                                    res.append([f"{class__}, ", df.iloc[j]['‚Ññ —É—Ä–æ–∫–∞'], df.iloc[j]['–ó–∞–º–µ–Ω—ã –∫–∞–±–∏–Ω–µ—Ç–æ–≤']])
                        sorted_res = sorted(res, key=lambda x: x[1])
                        text = '_' + prepare_for_markdown(df.columns.values[-1]) + '_\n'
                        flag = False
                        for line in sorted_res:
                            flag = True
                            if len(line) == 3:
                                text += prepare_for_markdown(f'{line[0]}{line[1]} —É—Ä–æ–∫(–∏): {line[2]}\n\n')
                            else:
                                text += prepare_for_markdown(f'{line[0]}{line[1]} —É—Ä–æ–∫(–∏): {line[2]} (—É—á–∏—Ç–µ–ª—å: {line[3]})\n\n')
                        if flag:
                            t += for_which_day
                            t += text
            await update.message.reply_text(t, parse_mode='MarkdownV2', reply_markup=await timetable_kbrd())
        elif update.message.text in ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']:
            user = db_sess.query(User).filter(User.telegram_id == user__id).first()
            if int(user.number) >= 10:
                lessons, day = await get_standard_timetable_for_user(user.name, user.surname, user.grade,
                                                                     self.day_num[update.message.text])
            else:
                lessons, day = await get_standard_timetable_for_user_6_9(user.grade,
                                                                         self.day_num[update.message.text])
            if lessons.empty:
                txt = (user.surname + ' ' + user.name + ' ' + user.grade)
                class_txt = user.grade

                await update.message.reply_text(f'–£—á–µ–Ω–∏–∫–∞ "{txt}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç '
                                                f'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {class_txt} –∫–ª–∞—Å—Å–∞.')
                return ConversationHandler.END
            t = f'*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ _{self.days[day]}_*\n\n'
            for txt_info, key in self.lessons_keys.items():
                try:
                    if int(user.number) >= 10:
                        pre_lesson_info = lessons.loc[key].split('###')
                    else:
                        pre_lesson_info = lessons.loc[key][day].split('###')

                    t += prepare_for_markdown(f'{txt_info}')
                    for lesson_info in pre_lesson_info:
                        lesson_info = lesson_info.split('\n')
                        t += prepare_for_markdown(
                            f'{lesson_info[1]} - –∫–∞–±. {lesson_info[-1]}\n(—É—á–∏—Ç–µ–ª—å: {lesson_info[0]})\n')
                    t += '\n'
                except Exception as e:
                    continue
            await update.message.reply_text(t, parse_mode='MarkdownV2', reply_markup=await timetable_kbrd())
        elif update.message.text == 'üé®–ú–æ–∏ –∫—Ä—É–∂–∫–∏üé®':
            await update.message.reply_text('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –¥–µ–Ω—å',
                                            reply_markup=await extra_school_timetable_kbrd())
        elif update.message.text == '‚ôüÔ∏è–°–µ–≥–æ–¥–Ω—è‚ôüÔ∏è':
            await update.message.reply_text('–ö—Ä—É–∂–∫–∏', reply_markup=await timetable_kbrd())
