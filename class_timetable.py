from funcs_back import *
from telegram.ext import ConversationHandler


class GetTimetable:
    days = {0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥—É', 3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü—É', 5: '–°—É–±–±–æ—Ç—É'}
    days2 = {0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥–∞', 3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü–∞', 5: '–°—É–±–±–æ—Ç–∞'}
    day_num = {'–ü–Ω': 0, '–í—Ç': 1, '–°—Ä': 2, '–ß—Ç': 3, '–ü—Ç': 4, '–°–±': 5}
    lessons_keys = {'0Ô∏è‚É£-–π —É—Ä–æ–∫, 8:30 - 8:55:\n': '0\n08:30 - 08:55',
                    '1Ô∏è‚É£-–π —É—Ä–æ–∫, 9:00 - 9:45:\n': '1\n09:00 - 09:45',
                    '2Ô∏è‚É£-–π —É—Ä–æ–∫, 9:55 - 10:40:\n': '2\n09:55 - 10:40',
                    '3Ô∏è‚É£-–π —É—Ä–æ–∫, 10:50 - 11:35:\n': '3\n10:50 - 11:35',
                    '4Ô∏è‚É£-–π —É—Ä–æ–∫, 11:45 - 12:30:\n': '4\n11:45 - 12:30',
                    '5Ô∏è‚É£-–π —É—Ä–æ–∫, 12:50 - 13:35:\n': '5\n12:50 - 13:35',
                    '6Ô∏è‚É£-–π —É—Ä–æ–∫, 13:55 - 14:40:\n': '6\n13:55 - 14:40',
                    '7Ô∏è‚É£-–π —É—Ä–æ–∫, 14:50 - 15:35:\n': '7\n14:50 - 15:35',
                    '8Ô∏è‚É£-–π —É—Ä–æ–∫, 15:45 - 16:30:\n': '8\n15:45 - 16:30'}
    for_datetime = {'0\n08:30 - 08:55': ((8, 20),
                                         (8, 55)),
                    '1\n09:00 - 09:45': ((8, 55),
                                         (9, 45)),
                    '2\n09:55 - 10:40': ((9, 45),
                                         (10, 40)),
                    '3\n10:50 - 11:35': ((10, 40),
                                         (11, 35)),
                    '4\n11:45 - 12:30': ((11, 35),
                                         (12, 30)),
                    '5\n12:50 - 13:35': ((12, 30),
                                         (13, 35)),
                    '6\n13:55 - 14:40': ((13, 35),
                                         (14, 40)),
                    '7\n14:50 - 15:35': ((14, 40),
                                         (15, 35)),
                    '8\n15:45 - 16:30': ((15, 35),
                                         (16, 30))}

    async def get_edits(self, context, user):
        t = ""
        edits_in_tt, for_which_day = await get_edits_in_timetable(context.user_data['NEXT_DAY_TT'])
        if ('–∑–∞–≤—Ç—Ä–∞' in for_which_day and context.user_data['NEXT_DAY_TT'] or
                '—Å–µ–≥–æ–¥–Ω—è' in for_which_day and not context.user_data.get('NEXT_DAY_TT')):
            if len(edits_in_tt) != 0:
                for df in edits_in_tt:
                    res = []
                    for j in df.index.values:
                        number_of_lesson = " ".join(df.iloc[j]['–£—Ä–æ–∫ ‚Ññ'].split('\n'))
                        if '–ó–∞–º–µ–Ω—ã' in df.columns.values:
                            if df.iloc[j]['–£—Ä–æ–∫ ‚Ññ'] == '' and j == 0:
                                continue
                            if user.number in df.iloc[j]['–ö–ª–∞—Å—Å'] and (user.grade[-1] in df.iloc[j]['–ö–ª–∞—Å—Å'] or '–∫–ª–∞—Å—Å—ã' in df.iloc[j]['–ö–ª–∞—Å—Å']):
                                subject, teacher_cabinet = df.iloc[j]['–ó–∞–º–µ–Ω—ã'].split('//')
                                subject = " ".join(subject.split('\n'))
                                class__ = " ".join(df.iloc[j]['–ö–ª–∞—Å—Å'].split('\n'))
                                if teacher_cabinet != '':
                                    teacher_cabinet = teacher_cabinet.split('\n')
                                    cabinet = teacher_cabinet[-1]
                                    teacher = " ".join(teacher_cabinet[:-1])
                                    if cabinet.count('.') == 2:
                                        # –£—á–∏—Ç–µ–ª—å
                                        res.append([f"{class__}, ", number_of_lesson, subject,
                                                    cabinet,
                                                    df.iloc[j][
                                                        '–£—Ä–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é']])  # –ö–∞–±–∏–Ω–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –¥–ª–∏–Ω–∞ 5
                                    else:
                                        res.append([f"{class__}, ", number_of_lesson,
                                                    subject + ', ' + cabinet, teacher,
                                                    df.iloc[j][
                                                        '–£—Ä–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é']])  # –í—Å–µ —É–∫–∞–∑–∞–Ω–æ, –¥–ª–∏–Ω–∞ 5
                                else:
                                    tmp = " ".join(df.iloc[j]['–£—Ä–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é'].split('\n'))
                                    res.append([f"{class__}, ", number_of_lesson,
                                                subject + f"\n(–£—Ä–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {tmp})"])  # –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞, –¥–ª–∏–Ω–∞ 3
                        else:
                            if user.number in df.iloc[j]['–ö–ª–∞—Å—Å'] and (user.grade[-1] in df.iloc[j]['–ö–ª–∞—Å—Å'] or '–∫–ª–∞—Å—Å—ã' in df.iloc[j]['–ö–ª–∞—Å—Å']):
                                class__ = " ".join(df.iloc[j]['–ö–ª–∞—Å—Å'].split('\n'))
                                res.append([f"{class__}, ", number_of_lesson,
                                            df.iloc[j]['–ó–∞–º–µ–Ω—ã –∫–∞–±–∏–Ω–µ—Ç–æ–≤'],
                                            df.iloc[j]['–£—Ä–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é']])  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –¥–ª–∏–Ω–∞ 4
                    sorted_res = sorted(res, key=lambda x: x[1])
                    text = '_' + prepare_for_markdown(df.columns.values[-1]) + '_\n'
                    flag = False
                    for line in sorted_res:
                        flag = True
                        urok_po_rasp = " ".join(line[-1].split("\n"))
                        if len(line) == 3:
                            text += prepare_for_markdown(
                                f'{line[0]}{line[1]} —É—Ä–æ–∫(–∏): {line[2]}\n\n')
                        elif len(line) == 4:  # –ó–∞–º–µ–Ω—ã –∫–∞–±.
                            if line[2] == urok_po_rasp == '':
                                text += prepare_for_markdown(f'{line[0]}{line[1]}\n\n')
                            else:
                                text += prepare_for_markdown(
                                    f'{line[0]}{line[1]} —É—Ä–æ–∫(–∏): {line[2]}\n(–£—Ä–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: '
                                    f'{urok_po_rasp})\n\n')
                        else:
                            text += prepare_for_markdown(
                                f'{line[0]}{line[1]} —É—Ä–æ–∫(–∏): {line[2]} (—É—á–∏—Ç–µ–ª—å: {line[3]})'
                                f'\n(–£—Ä–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {urok_po_rasp})\n\n')
                    if flag:
                        t += for_which_day
                        t += text
        return t

    @throttle
    async def get_timetable(self, update, context):
        if context.user_data.get('in_conversation'):
            return
        user__id = update.message.from_user.id
        if not db_sess.query(User).filter(User.telegram_id == user__id).first():
            await update.message.reply_text(f'‚ö†Ô∏è–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: /start')
            return
        user = db_sess.query(User).filter(User.telegram_id == user__id).first()
        if user.grade == '–ê–î–ú–ò–ù':
            await update.message.reply_text(f'‚ö†Ô∏è–£ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.')
            return
        if update.message.text == 'üìö–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö':
            context.user_data['NEXT_DAY_TT'] = False
            if int(user.number) >= 10:
                lessons, day = await get_timetable_for_user(context, f'{user.surname} {user.name}', user.grade)
            else:
                lessons, day = await get_timetable_for_user_6_9(context, user.grade)
            if lessons.empty:
                txt = (user.surname + ' ' + user.name + ' ' + user.grade)
                class_txt = user.grade

                await update.message.reply_text(f'–£—á–µ–Ω–∏–∫–∞ "{txt}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç '
                                                f'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {class_txt} –∫–ª–∞—Å—Å–∞.')
                return
            title = f'*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ _{self.days[day]}_*\n\n'
            t = ""
            time_now = datetime.now()  # - timedelta(hours=3)
            # !!!!!!!!!!!!!!!!!
            for txt_info, key in self.lessons_keys.items():
                try:
                    if int(user.number) >= 10:
                        pre_lesson_info = lessons.loc[key].split('###')
                    else:
                        pre_lesson_info = lessons.loc[key][day].split('###')
                    start, end = self.for_datetime[key]
                    # –ü–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ: —É—á–∏—Ç–µ–ª—å, –ø—Ä–µ–¥–º–µ—Ç, –∫–∞–±.
                    # if type(pre_lesson_info) == str:
                    #     pre_lesson_info = [pre_lesson_info]
                    if start <= (time_now.hour, time_now.minute) < end and not context.user_data['NEXT_DAY_TT']:
                        t += f'_*' + prepare_for_markdown(f'‚û°Ô∏è {txt_info}')
                    else:
                        t += prepare_for_markdown(f'{txt_info}')
                    last_cab = ''
                    for lesson_info in pre_lesson_info:
                        lesson_info = lesson_info.split('\n')
                        if lesson_info[-2] not in ['–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π', '–ø—Ä–∞–∫—Ç–∏–∫—É–º (1)', '–ß–∞—Å', '—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (1)',
                        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (1)', '–ø—Ä–∞–∫—Ç–∏–∫—É–º (2)', '—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (2)', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (2)',
                        '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (1)', '(1)', '—Ñ–∏–∑–∏–∫–∞ (1)', '—ç—Ñ—Ñ–µ–∫—Ç—ã (1)', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (2)', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ']:
                            if '–≠—Ä–ª–∏—Ö –ò.–ì.' in lesson_info[-1]:
                                lesson_info = ['–≠—Ä–ª–∏—Ö –ò.–ì.'] + [lesson_info[-2]] + [lesson_info[-1].split(' ')[-1]]
                            lesson_name = lesson_info[-2]
                            teachers = " ".join(lesson_info[:-2])
                        else:
                            if '–≠—Ä–ª–∏—Ö –ò.–ì.' in lesson_info[-1]:
                                lesson_info = ['–≠—Ä–ª–∏—Ö –ò.–ì.'] + lesson_info[-3:-1] + [lesson_info[-1].split(' ')[-1]]
                            lesson_name = " ".join(lesson_info[-3:-1])
                            teachers = " ".join(lesson_info[:-3])
                        cabinet = lesson_info[-1]
                        if '–í' in lesson_name and '–¢' in lesson_name and '–≠.' in lesson_name and '–ö.' in lesson_name:
                            one_more_teacher_VTEK = (lesson_name.replace('–í', '').replace('–¢', '').
                                                     replace('–≠.', '.').replace('–ö.', '.'))
                            teachers += " " + one_more_teacher_VTEK
                            lesson_name = '–í–¢–≠–ö'
                        elif lesson_name == '–ò.–ù. –í–¢–≠–ö':
                            lesson_name = '–í–¢–≠–ö'
                            teachers += " –ò.–ù."
                        if len(lesson_info) == 2:
                            cabinet = last_cab
                            lesson_name = lesson_info[-1]
                            teachers = lesson_info[0]
                        t += prepare_for_markdown(
                            f'{lesson_name} - –∫–∞–±. {cabinet}\n(—É—á–∏—Ç–µ–ª—å: {teachers})\n')
                        last_cab = cabinet
                    if start <= (time_now.hour, time_now.minute) < end and not context.user_data['NEXT_DAY_TT']:
                        t += '*_'
                    t += '\n'
                except Exception as e:
                    continue
            t += '\n'
            edits_text = await self.get_edits(context, user)
            if edits_text:
                t = title + '_' + prepare_for_markdown('‚ö†Ô∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–ª—è –í–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∏–∂–µ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!\n\n') + '_' + t + edits_text
            else:
                t = title + '\n' + t + edits_text
            await update.message.reply_text(t, parse_mode='MarkdownV2', reply_markup=await timetable_kbrd())
        elif (not context.user_data.get('EXTRA_CLICKED') and
              update.message.text in ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']):
            user = db_sess.query(User).filter(User.telegram_id == user__id).first()
            if int(user.number) >= 10:
                lessons, day = await get_standard_timetable_for_user(f'{user.surname} {user.name}', user.grade,
                                                                     self.day_num[update.message.text])
            else:
                lessons, day = await get_standard_timetable_for_user_6_9(user.grade,
                                                                         self.day_num[update.message.text])
            if lessons.empty:
                txt = (user.surname + ' ' + user.name + ' ' + user.grade)
                class_txt = user.grade

                await update.message.reply_text(f'–£—á–µ–Ω–∏–∫–∞ "{txt}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç '
                                                f'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {class_txt} –∫–ª–∞—Å—Å–∞.')
                return ConversationHandler.END
            title = f'*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ _{self.days[day]}_*\n\n'
            t = ""
            edits_text = ""
            context.user_data['NEXT_DAY_TT'] = False
            if self.day_num[update.message.text] == 0 and datetime.now().weekday() == 5:
                context.user_data['NEXT_DAY_TT'] = True
                edits_text = await self.get_edits(context, user)
            elif self.day_num[update.message.text] == datetime.now().weekday():
                context.user_data['NEXT_DAY_TT'] = False
                edits_text = await self.get_edits(context, user)
            elif self.day_num[update.message.text] == (datetime.now().weekday() + 1) % 7:
                context.user_data['NEXT_DAY_TT'] = True
                edits_text = await self.get_edits(context, user)
            for txt_info, key in self.lessons_keys.items():
                try:
                    if int(user.number) >= 10:
                        pre_lesson_info = lessons.loc[key].split('###')
                    else:
                        pre_lesson_info = lessons.loc[key][day].split('###')

                    t += prepare_for_markdown(txt_info)
                    last_cab = ""
                    for lesson_info in pre_lesson_info:
                        lesson_info = lesson_info.split('\n')
                        if lesson_info[-2] not in ['–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π', '–ø—Ä–∞–∫—Ç–∏–∫—É–º (1)', '–ß–∞—Å', '—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (1)',
                        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (1)', '–ø—Ä–∞–∫—Ç–∏–∫—É–º (2)', '—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (2)', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (2)',
                        '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (1)', '(1)', '—Ñ–∏–∑–∏–∫–∞ (1)', '—ç—Ñ—Ñ–µ–∫—Ç—ã (1)', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (2)', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ']:
                            if '–≠—Ä–ª–∏—Ö –ò.–ì.' in lesson_info[-1]:
                                lesson_info = ['–≠—Ä–ª–∏—Ö –ò.–ì.'] + [lesson_info[-2]] + [lesson_info[-1].split(' ')[-1]]
                            lesson_name = lesson_info[-2]
                            teachers = " ".join(lesson_info[:-2])
                        else:
                            if '–≠—Ä–ª–∏—Ö –ò.–ì.' in lesson_info[-1]:
                                lesson_info = ['–≠—Ä–ª–∏—Ö –ò.–ì.'] + lesson_info[-3:-1] + [lesson_info[-1].split(' ')[-1]]
                            lesson_name = " ".join(lesson_info[-3:-1])
                            teachers = " ".join(lesson_info[:-3])
                        cabinet = lesson_info[-1]
                        if '–í' in lesson_name and '–¢' in lesson_name and '–≠.' in lesson_name and '–ö.' in lesson_name:
                            one_more_teacher_VTEK = (lesson_name.replace('–í', '').replace('–¢', '').
                                                     replace('–≠.', '.').replace('–ö.', '.'))
                            teachers += " " + one_more_teacher_VTEK
                            lesson_name = '–í–¢–≠–ö'
                        elif lesson_name == '–ò.–ù. –í–¢–≠–ö':
                            lesson_name = '–í–¢–≠–ö'
                            teachers += " –ò.–ù."
                        if len(lesson_info) == 2:
                            cabinet = last_cab
                            lesson_name = lesson_info[-1]
                            teachers = lesson_info[0]
                        t += prepare_for_markdown(
                            f'{lesson_name} - –∫–∞–±. {cabinet}\n(—É—á–∏—Ç–µ–ª—å: {teachers})\n')
                        last_cab = cabinet
                        """if lesson_info[-2] not in ['–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π', '–ø—Ä–∞–∫—Ç–∏–∫—É–º (1)', '–ß–∞—Å', '—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (1)',
                        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (1)', '–ø—Ä–∞–∫—Ç–∏–∫—É–º (2)', '—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (2)', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (2)',
                        '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (1)', '(1)', '—Ñ–∏–∑–∏–∫–∞ (1)', '—ç—Ñ—Ñ–µ–∫—Ç—ã (1)', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (2)', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ']:
                            t += prepare_for_markdown(
                                f'{lesson_info[-2]} - –∫–∞–±. {lesson_info[-1]}\n(—É—á–∏—Ç–µ–ª—å: {" ".join(lesson_info[:-2])})\n')
                        else:
                            t += prepare_for_markdown(
                                f'{" ".join(lesson_info[-3:-1])} - –∫–∞–±. {lesson_info[-1]}\n(—É—á–∏—Ç–µ–ª—å: {" ".join(lesson_info[:-3])})\n')"""
                    t += '\n'
                except Exception as e:
                    continue
            if edits_text:
                t = title + '_' + prepare_for_markdown(
                    '‚ö†Ô∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–ª—è –í–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∏–∂–µ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!\n\n') + '_' + t + edits_text
            else:
                t = title + '\n' + t + edits_text
            await update.message.reply_text(t, parse_mode='MarkdownV2', reply_markup=await timetable_kbrd())
        elif update.message.text == 'üé®–ú–æ–∏ –∫—Ä—É–∂–∫–∏üé®':
            await update.message.reply_text('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –¥–µ–Ω—å',
                                            reply_markup=await extra_school_timetable_kbrd())
            context.user_data['EXTRA_CLICKED'] = True
        elif context.user_data.get('EXTRA_CLICKED') and update.message.text in ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']:
            context.user_data['EXTRA_CLICKED'] = False
            extra_text = extra_lessons_return(update.message.from_user.id, update.message.text)
            text = prepare_for_markdown(extra_text)
            if text == '':
                await update.message.reply_text(
                    f'*–ö—Ä—É–∂–∫–æ–≤ –Ω–∞ {self.days[self.day_num[update.message.text]].lower()} –Ω–µ—Ç*',
                    reply_markup=await timetable_kbrd(), parse_mode='MarkdownV2')
                return
            await update.message.reply_text(
                f'*–ö—Ä—É–∂–∫–∏ –Ω–∞ {self.days[self.day_num[update.message.text]].lower()}*\n\n{text}',
                reply_markup=await timetable_kbrd(), parse_mode='MarkdownV2')
        elif update.message.text == '‚ôüÔ∏è–°–µ–≥–æ–¥–Ω—è‚ôüÔ∏è':
            today = datetime.now().weekday()
            context.user_data['EXTRA_CLICKED'] = False
            if today == 6:
                await update.message.reply_text(f'*–í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω—É–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å\! –ö—Ä—É–∂–∫–æ–≤ –Ω–µ—Ç\.*',
                                                reply_markup=await timetable_kbrd(), parse_mode='MarkdownV2')
                return
            days = {value: key for key, value in self.day_num.items()}
            extra_text = extra_lessons_return(update.message.from_user.id, days[today])
            text = prepare_for_markdown(extra_text)
            if text == '':
                await update.message.reply_text(
                    f'*–ö—Ä—É–∂–∫–æ–≤ –Ω–∞ {self.days[today].lower()} –Ω–µ—Ç*',
                    reply_markup=await timetable_kbrd(), parse_mode='MarkdownV2')
                return
            await update.message.reply_text(
                f'*–ö—Ä—É–∂–∫–∏ –Ω–∞ {self.days[today].lower()}*\n\n{text}',
                reply_markup=await timetable_kbrd(), parse_mode='MarkdownV2')
        elif update.message.text == 'üé≠–í—Å–µ –∫—Ä—É–∂–∫–∏üé≠':
            context.user_data['EXTRA_CLICKED'] = False
            list_text_res = []
            text_res = ""
            for day, day_number in self.day_num.items():
                extra_text = extra_lessons_return(update.message.from_user.id, day)
                text = prepare_for_markdown(extra_text)
                if text != "":
                    text_res += f'_*{self.days2[day_number]}*_\n{text}\n'
                if len(text_res) > 3800:
                    list_text_res.append(text_res)
                    text_res = ""
            list_text_res.append(text_res)
            if text_res == '':
                await update.message.reply_text(
                    f'*–¢—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª—Å—è\(–ª–∞—Å—å\) –Ω–∞ –∫—Ä—É–∂–∫–∏\.*',
                    reply_markup=await timetable_kbrd(), parse_mode='MarkdownV2')
                return
            for el in list_text_res:
                if el:
                    await update.message.reply_text(el,
                                                    reply_markup=await timetable_kbrd(), parse_mode='MarkdownV2')
